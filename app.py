# app.py
import streamlit as st
import openai
import os 
from llama_index.core import VectorStoreIndex, Settings
from llama_index.vector_stores.chroma import ChromaVectorStore
from llama_index.embeddings.openai import OpenAIEmbedding
import chromadb
import json

# --- Konfigur√°cia str√°nky ---
st.set_page_config(page_title="API Asistent Sellio", layout="wide", page_icon="ü§ñ")

# --- Funkcia na kontrolu hesla ---
def check_password():
    """Vr√°ti True, ak pou≈æ√≠vateƒæ zadal spr√°vne heslo, inak False."""
    # Naƒç√≠tanie hesla zo Streamlit Secrets
    # V .streamlit/secrets.toml by ste mali ma≈•: APP_PASSWORD = "vase_super_tajne_heslo"
    correct_password = st.secrets.get("APP_PASSWORD", "predvoleneHeslo123") # Fallback pre lok√°lne testovanie bez secrets

    # Ak u≈æ bolo heslo zadan√© a je spr√°vne, ulo≈æ√≠me si to do session state
    if st.session_state.get("password_correct", False):
        return True

    # Zobrazenie formul√°ra na zadanie hesla
    st.header("üîë Pr√≠stup k aplik√°cii")
    password_placeholder = st.empty()
    password = password_placeholder.text_input("Zadajte pr√≠stupov√© heslo:", type="password", key="password_input")

    if password:
        if password == correct_password:
            st.session_state.password_correct = True
            password_placeholder.empty() # Odstr√°ni input pole po spr√°vnom zadan√≠
            st.rerun() # Znovu naƒç√≠ta str√°nku, teraz u≈æ s pr√≠stupom
            return True
        else:
            st.error("Nespr√°vne heslo. Sk√∫ste znova.")
            st.session_state.password_correct = False
            return False
    return False

# --- Funkcie na form√°tovanie (zost√°vaj√∫ rovnak√©) ---
def pretty_print_parameters(params):
    if not params:
        return "≈Ωiadne."
    output = ""
    for p in params:
        output += f"- **{p.get('name')}** ({p.get('in')}, {p.get('schema', {}).get('type', 'N/A')})"
        if p.get('required'):
            output += " (povinn√Ω)"
        output += f": {p.get('description', 'Bez popisu.')}\n"
    return output

def pretty_print_request_body(body):
    if not body or not body.get('content'):
        return "Nie je definovan√©."
    output = ""
    for content_type, details in body.get('content', {}).items():
        output += f"  - **{content_type}**:\n"
        if 'schema' in details and '$ref' in details['schema']:
            schema_name = details['schema']['$ref'].split('/')[-1]
            output += f"    - Sch√©ma: `{schema_name}` (Detail n√°jdete v sekcii 'components/schemas' va≈°ej OpenAPI ≈°pecifik√°cie)\n"
        elif 'schema' in details:
            try:
                output += f"    - Sch√©ma: ```json\n{json.dumps(details.get('schema'), indent=2, ensure_ascii=False)}\n```\n"
            except Exception:
                output += "    - Sch√©ma: (nepodarilo sa naform√°tova≈•)\n"
    return output

# --- Hlavn√° logika aplik√°cie ---
if not check_password():
    st.stop() # Zastav√≠ vykon√°vanie zvy≈°ku aplik√°cie, ak heslo nie je spr√°vne

# Ak sme sa dostali sem, heslo bolo spr√°vne zadan√©
st.sidebar.success("Pr√≠stup povolen√Ω.", icon="‚úÖ")

# --- Bezpeƒçn√© naƒç√≠tanie API kƒæ√∫ƒça zo Streamlit Secrets ---
# Na cloude MUS√ç by≈• API kƒæ√∫ƒç v Streamlit Secrets
# Lok√°lne m√¥≈æe by≈• st√°le ako environment√°lna premenn√° pre testovanie
api_key = None
AI_ENABLED = False
try:
    api_key = st.secrets["OPENAI_API_KEY"] # Prim√°rne pre cloud
    if api_key:
        st.sidebar.info("API kƒæ√∫ƒç naƒç√≠tan√Ω zo Streamlit Secrets.", icon="‚òÅÔ∏è")
        AI_ENABLED = True
except (AttributeError, KeyError, FileNotFoundError): # AttributeError ak st.secrets neexistuje (lok√°lne), KeyError ak kƒæ√∫ƒç ch√Ωba
    st.sidebar.warning("Streamlit Secrets pre OpenAI API kƒæ√∫ƒç nen√°jden√©. Sk√∫≈°am lok√°lne prostredie...")
    api_key = os.getenv("OPENAI_API_KEY")
    if api_key:
        st.sidebar.info("API kƒæ√∫ƒç naƒç√≠tan√Ω z lok√°lneho prostredia (pre testovanie).", icon="üíª")
        AI_ENABLED = True

if not AI_ENABLED or not api_key:
    st.error("Chyba konfigur√°cie: OpenAI API kƒæ√∫ƒç nebol n√°jden√Ω. Uistite sa, ≈æe je nastaven√Ω v Streamlit Secrets pre t√∫to aplik√°ciu.")
    st.stop()
    
openai.api_key = api_key

# <<< Nastavenie LlamaIndex Settings >>>
try:
    Settings.embed_model = OpenAIEmbedding(model="text-embedding-3-small", api_key=openai.api_key)
    # Ak pou≈æ√≠vate LLM od OpenAI aj pre chat, m√¥≈æete ho nastavi≈• tu glob√°lne:
    # from llama_index.llms.openai import OpenAI
    # Settings.llm = OpenAI(model="gpt-4o", api_key=openai.api_key) 
except Exception as e:
    st.error(f"Chyba pri nastavovan√≠ LlamaIndex Settings (embed_model/llm): {e}")
    st.stop()

# --- Hlavn√Ω titulok a popis aplik√°cie ---
st.title("ü§ñ V√°≈° Intern√Ω API Asistent")
st.markdown("Op√Ωtajte sa ma ƒçokoƒævek o na≈°ej API. Odpoviem na z√°klade **Sellio 2 API dokument√°cie** (verzia 2.9).")
st.markdown("---")

# --- Funkcia na naƒç√≠tanie existuj√∫ceho indexu z ChromaDB ---
@st.cache_resource(show_spinner="Prip√°jam sa k znalostnej datab√°ze...")
def load_index_from_chroma():
    db_path = "./chroma_db_sellio" 
    if not os.path.exists(db_path) or not os.listdir(db_path):
        st.error(f"Chyba: Prieƒçinok '{db_path}' pre ChromaDB nebol n√°jden√Ω alebo je pr√°zdny. Uistite sa, ≈æe je s√∫ƒças≈•ou v√°≈°ho projektu na GitHube a ≈æe ste predt√Ωm lok√°lne spustili `build_index.py`.")
        st.stop()
        
    db = chromadb.PersistentClient(path=db_path)
    chroma_collection_name = "api_docs_sellio_v2_9"
    
    try:
        chroma_collection = db.get_collection(name=chroma_collection_name)
    except Exception as e: 
        st.error(f"Chyba: Kolekcia '{chroma_collection_name}' v ChromaDB nebola n√°jden√°. Uistite sa, ≈æe `build_index.py` prebehol spr√°vne. Detail: {e}")
        st.stop()

    if chroma_collection.count() == 0:
        st.error(f"Chyba: Kolekcia '{chroma_collection.name}' v ChromaDB je pr√°zdna. Uistite sa, ≈æe `build_index.py` prebehol spr√°vne a naplnil datab√°zu.")
        st.stop()

    vector_store = ChromaVectorStore(chroma_collection=chroma_collection)
    # LlamaIndex by mal automaticky pou≈æi≈• model z glob√°lnych Settings
    index = VectorStoreIndex.from_vector_store(vector_store=vector_store)
    st.sidebar.info(f"√öspe≈°ne pripojen√Ω k datab√°ze '{chroma_collection.name}' ({chroma_collection.count()} dokumentov).", icon="üìö")
    return index

# Naƒç√≠tanie indexu
try:
    index = load_index_from_chroma()
except Exception as e:
    st.error(f"Nastala chyba pri naƒç√≠tavan√≠ indexu z ChromaDB: {e}")
    st.stop()

# --- Nastavenie Chat Engine ---
if "chat_engine" not in st.session_state:
    system_prompt_text = (
        "Si expertn√Ω AI asistent pre API dokument√°ciu 'Sellio 2' (verzia 2.9). "
        "Tvojou √∫lohou je presne a struƒçne odpoveda≈• na ot√°zky t√Ωkaj√∫ce sa tejto API na z√°klade poskytnut√©ho kontextu z dokument√°cie. "
        "V≈ædy odpovedaj v slovenƒçine. "
        "Ak inform√°cia nie je v kontexte, povedz, ≈æe ju nem√°≈° k dispoz√≠cii, nevym√Ω≈°ƒæaj si. "
        "Pri popisovan√≠ endpointov uveƒè HTTP met√≥du a cestu (napr. 'POST /api/v1/products'). "
        "Ak ot√°zka smeruje k parametrom, request body alebo responses, sna≈æ sa ich pekne naform√°tova≈•."
        "Ak je v kontexte k√≥dov√Ω pr√≠klad (JSON schema), m√¥≈æe≈° ho zahrn√∫≈• do odpovede v Markdown code blocku."
        "Buƒè n√°pomocn√Ω a priateƒæsk√Ω."
    )
    
    st.session_state.chat_engine = index.as_chat_engine(
        chat_mode="condense_plus_context", 
        system_prompt=system_prompt_text,
        # Ak ste nastavili Settings.llm glob√°lne, nemus√≠te ho tu ≈°pecifikova≈•
        # llm=OpenAI(model="gpt-4o", api_key=openai.api_key), # Ak chcete explicitne pre chat engine
        verbose=True 
    )

# --- Hist√≥ria chatu ---
if "messages" not in st.session_state:
    st.session_state.messages = [{"role": "assistant", "content": "Dobr√Ω de≈à! Som v√°≈° AI asistent pre Sellio 2 API. Ako v√°m m√¥≈æem pom√¥c≈•?"}]

for msg in st.session_state.messages:
    with st.chat_message(msg["role"]):
        st.markdown(msg["content"])

# --- Vstup od pou≈æ√≠vateƒæa a generovanie odpovede ---
if user_query := st.chat_input("Va≈°a ot√°zka k API..."):
    st.session_state.messages.append({"role": "user", "content": user_query})
    with st.chat_message("user"):
        st.markdown(user_query)

    with st.chat_message("assistant"):
        message_placeholder = st.empty()
        with st.spinner("ü§ñ AI prem√Ω≈°ƒæa..."):
            try:
                response = st.session_state.chat_engine.chat(user_query)
                ai_response_content = response.response
            except Exception as e:
                ai_response_content = f"Prep√°ƒçte, nastala chyba pri spracovan√≠ va≈°ej po≈æiadavky: {e}"
                st.error(ai_response_content)

        message_placeholder.markdown(ai_response_content)
        st.session_state.messages.append({"role": "assistant", "content": ai_response_content})

# --- Sidebar s inform√°ciami ---
st.sidebar.header("O aplik√°cii")
st.sidebar.markdown("""
Tento AI asistent je navrhnut√Ω tak, aby v√°m pomohol r√Ωchlo n√°js≈• inform√°cie 
v API dokument√°cii pre **Sellio 2 (verzia 2.9)**.
""")
st.sidebar.markdown("Pou≈æit√© technol√≥gie: Streamlit, LlamaIndex, OpenAI, ChromaDB.")

if st.sidebar.button("Vymaza≈• hist√≥riu chatu"):
    st.session_state.messages = [{"role": "assistant", "content": "Dobr√Ω de≈à! Som v√°≈° AI asistent pre Sellio 2 API. Ako v√°m m√¥≈æem pom√¥c≈•?"}]
    if "chat_engine" in st.session_state:
        st.session_state.chat_engine.reset()
    st.session_state.password_correct = False # Aby si p√Ωtalo heslo znova
    st.rerun()
