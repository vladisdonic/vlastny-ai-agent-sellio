
import streamlit as st
import openai
import os
from llama_index.core import VectorStoreIndex, Settings
from llama_index.vector_stores.chroma import ChromaVectorStore
from llama_index.llms.openai import OpenAI
from llama_index.embeddings.openai import OpenAIEmbedding
import chromadb
import json

st.set_page_config(page_title="API Asistent Sellio", layout="wide", page_icon="ü§ñ")

def check_password():
    correct_password = st.secrets.get("APP_PASSWORD", "predvoleneHeslo123")
    if st.session_state.get("password_correct", False):
        return True
    
    st.header("üîë Pr√≠stup k aplik√°cii")
    password_placeholder = st.empty()
    password = password_placeholder.text_input("Zadajte pr√≠stupov√© heslo:", type="password", key="password_input")

    if password:
        if password == correct_password:
            st.session_state.password_correct = True
            password_placeholder.empty()
            st.rerun()
            return True
        else:
            st.error("Nespr√°vne heslo. Sk√∫ste znova.")
            st.session_state.password_correct = False
            return False
    return False

if not check_password():
    st.stop()

st.sidebar.success("Pr√≠stup povolen√Ω.", icon="‚úÖ")

# Naƒç√≠tanie a nastavenie API kƒæ√∫ƒça
try:
    api_key = st.secrets["OPENAI_API_KEY"]
    openai.api_key = api_key
    st.sidebar.info("API kƒæ√∫ƒç naƒç√≠tan√Ω zo Streamlit Secrets.", icon="‚òÅÔ∏è")
except (AttributeError, KeyError, FileNotFoundError):
    st.error("Chyba konfigur√°cie: OpenAI API kƒæ√∫ƒç nebol n√°jden√Ω v Streamlit Secrets.")
    st.stop()
    
# Nastavenie modelov pre LlamaIndex
try:
    Settings.llm = OpenAI(model="gpt-4o")
    Settings.embed_model = OpenAIEmbedding(model="text-embedding-3-small")
except Exception as e:
    st.error(f"Chyba pri nastavovan√≠ LlamaIndex modelov: {e}")
    st.stop()

st.title("ü§ñ V√°≈° Intern√Ω API Asistent")
st.markdown("Op√Ωtajte sa ma ƒçokoƒævek o na≈°ej API. Odpoviem na z√°klade **Sellio 2 API dokument√°cie**.")
st.markdown("---")

@st.cache_resource(show_spinner="Prip√°jam sa k znalostnej datab√°ze...")
def load_index():
    db_path = "./chroma_db_sellio_v2" # Nov√Ω n√°zov prieƒçinka
    collection_name = "api_docs_sellio_latest" # Nov√Ω n√°zov kolekcie
    
    if not os.path.exists(db_path) or not os.listdir(db_path):
        st.error(f"Chyba: Prieƒçinok datab√°zy '{db_path}' nebol n√°jden√Ω. Uistite sa, ≈æe je nahrat√Ω na GitHub.")
        st.stop()
        
    db = chromadb.PersistentClient(path=db_path)
    chroma_collection = db.get_or_create_collection(collection_name)
    
    if chroma_collection.count() == 0:
        st.error(f"Chyba: Datab√°za '{collection_name}' je pr√°zdna.")
        st.stop()

    vector_store = ChromaVectorStore(chroma_collection=chroma_collection)
    index = VectorStoreIndex.from_vector_store(vector_store=vector_store)
    st.sidebar.info(f"√öspe≈°ne pripojen√Ω k datab√°ze '{collection_name}'.", icon="üìö")
    return index

try:
    index = load_index()
except Exception as e:
    st.error(f"Nastala chyba pri naƒç√≠tavan√≠ datab√°zy: {e}")
    st.stop()

if "chat_engine" not in st.session_state:
    system_prompt_text = (
        "Si expertn√Ω AI asistent pre API dokument√°ciu 'Sellio 2'. "
        "Tvojou √∫lohou je presne a struƒçne odpoveda≈• na ot√°zky t√Ωkaj√∫ce sa tejto API na z√°klade poskytnut√©ho kontextu z dokument√°cie. "
        "V≈ædy odpovedaj v slovenƒçine. "
        "Ak inform√°cia nie je v kontexte, povedz, ≈æe ju nem√°≈° k dispoz√≠cii, nevym√Ω≈°ƒæaj si. "
        "Pri popisovan√≠ endpointov uveƒè HTTP met√≥du a cestu (napr. 'POST /api/v1/products')."
    )
    st.session_state.chat_engine = index.as_chat_engine(
        chat_mode="condense_plus_context",
        system_prompt=system_prompt_text,
        verbose=True
    )

if "messages" not in st.session_state:
    st.session_state.messages = [{"role": "assistant", "content": "Dobr√Ω de≈à! Som v√°≈° AI asistent pre Sellio 2 API. Ako v√°m m√¥≈æem pom√¥c≈•?"}]

for msg in st.session_state.messages:
    with st.chat_message(msg["role"]):
        st.markdown(msg["content"])

if user_query := st.chat_input("Va≈°a ot√°zka k API..."):
    st.session_state.messages.append({"role": "user", "content": user_query})
    with st.chat_message("user"):
        st.markdown(user_query)

    with st.chat_message("assistant"):
        with st.spinner("ü§ñ AI prem√Ω≈°ƒæa..."):
            try:
                response = st.session_state.chat_engine.chat(user_query)
                st.markdown(response.response)
                st.session_state.messages.append({"role": "assistant", "content": response.response})
            except Exception as e:
                error_msg = f"Prep√°ƒçte, nastala chyba: {e}"
                st.error(error_msg)
                st.session_state.messages.append({"role": "assistant", "content": error_msg})

if st.sidebar.button("Vymaza≈• hist√≥riu chatu"):
    st.session_state.messages = [{"role": "assistant", "content": "Dobr√Ω de≈à! Som v√°≈° AI asistent pre Sellio 2 API. Ako v√°m m√¥≈æem pom√¥c≈•?"}]
    if "chat_engine" in st.session_state:
        st.session_state.chat_engine.reset()
    st.session_state.password_correct = False
    st.rerun()
